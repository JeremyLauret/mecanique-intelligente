{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Projet de Departement - Mecanique intelligente \n",
    "\n",
    "## Reconnaissance des elements d'un schema mecanique avec utilisation de la structure ResNet "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\"\"\"\n",
    "\n",
    "#Trains a ResNet on our dataset.\n",
    "\n",
    "ResNet v1:\n",
    "\n",
    "[Deep Residual Learning for Image Recognition](https://arxiv.org/pdf/1512.03385.pdf)\n",
    "\n",
    "ResNet v2:\n",
    "\n",
    "[Identity Mappings in Deep Residual Networks](https://arxiv.org/pdf/1603.05027.pdf)\n",
    "\n",
    "Model|n|200-epoch accuracy|Original paper accuracy |sec/epoch GTX1080Ti\n",
    "\n",
    ":------------|--:|-------:|-----------------------:|---:\n",
    "\n",
    "ResNet20   v1|  3| 92.16 %|                 91.25 %|35\n",
    "\n",
    "ResNet32   v1|  5| 92.46 %|                 92.49 %|50\n",
    "\n",
    "ResNet44   v1|  7| 92.50 %|                 92.83 %|70\n",
    "\n",
    "ResNet56   v1|  9| 92.71 %|                 93.03 %|90\n",
    "\n",
    "ResNet110  v1| 18| 92.65 %|            93.39+-.16 %|165\n",
    "\n",
    "ResNet164  v1| 27|     - %|                 94.07 %|  -\n",
    "\n",
    "ResNet1001 v1|N/A|     - %|                 92.39 %|  -\n",
    "\n",
    "&nbsp;\n",
    "\n",
    "Model|n|200-epoch accuracy|Original paper accuracy |sec/epoch GTX1080Ti\n",
    "\n",
    ":------------|--:|-------:|-----------------------:|---:\n",
    "\n",
    "ResNet20   v2|  2|     - %|                     - %|---\n",
    "\n",
    "ResNet32   v2|N/A| NA    %|            NA         %| NA\n",
    "\n",
    "ResNet44   v2|N/A| NA    %|            NA         %| NA\n",
    "\n",
    "ResNet56   v2|  6| 93.01 %|            NA         %|100\n",
    "\n",
    "ResNet110  v2| 12| 93.15 %|            93.63      %|180\n",
    "\n",
    "ResNet164  v2| 18|     - %|            94.54      %|  -\n",
    "\n",
    "ResNet1001 v2|111|     - %|            95.08+-.14 %|  -\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "#Import necessary libraries \n",
    "from __future__ import print_function\n",
    "import keras\n",
    "from keras.layers import Dense, Conv2D, BatchNormalization, Activation\n",
    "from keras.layers import AveragePooling2D, Input, Flatten\n",
    "from keras.optimizers import Adam\n",
    "from keras.callbacks import ModelCheckpoint, LearningRateScheduler\n",
    "from keras.callbacks import ReduceLROnPlateau\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras.regularizers import l2\n",
    "from keras import backend as K\n",
    "from keras.models import Model\n",
    "import numpy as np\n",
    "import os\n",
    "import cv2\n",
    "import glob\n",
    "import matplotlib.pyplot as plt\n",
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Training parameters\n",
    "batch_size = 32  # orig paper trained all networks with batch_size=128\n",
    "epochs = 100 # orig paper trained all networks with epochs=200\n",
    "steps_per_epoch = 1\n",
    "data_augmentation = True\n",
    "num_classes = 44"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Subtracting pixel mean improves accuracy\n",
    "subtract_pixel_mean = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model parameter\n",
    "# ----------------------------------------------------------------------------\n",
    "#           |      | 200-epoch | Orig Paper| 200-epoch | Orig Paper| sec/epoch\n",
    "# Model     |  n   | ResNet v1 | ResNet v1 | ResNet v2 | ResNet v2 | GTX1080Ti\n",
    "#           |v1(v2)| %Accuracy | %Accuracy | %Accuracy | %Accuracy | v1 (v2)\n",
    "# ----------------------------------------------------------------------------\n",
    "# ResNet20  | 3 (2)| 92.16     | 91.25     | -----     | -----     | 35 (---)\n",
    "# ResNet32  | 5(NA)| 92.46     | 92.49     | NA        | NA        | 50 ( NA)\n",
    "# ResNet44  | 7(NA)| 92.50     | 92.83     | NA        | NA        | 70 ( NA)\n",
    "# ResNet56  | 9 (6)| 92.71     | 93.03     | 93.01     | NA        | 90 (100)\n",
    "# ResNet110 |18(12)| 92.65     | 93.39+-.16| 93.15     | 93.63     | 165(180)\n",
    "# ResNet164 |27(18)| -----     | 94.07     | -----     | 94.54     | ---(---)\n",
    "# ResNet1001| (111)| -----     | 92.39     | -----     | 95.08+-.14| ---(---)\n",
    "# ---------------------------------------------------------------------------\n",
    "n = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model version\n",
    "# Orig paper: version = 1 (ResNet v1), Improved ResNet: version = 2 (ResNet v2)\n",
    "version = 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Computed depth from supplied model parameter n\n",
    "if version == 1:\n",
    "    depth = n * 6 + 2\n",
    "elif version == 2:\n",
    "    depth = n * 9 + 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model name, depth and version\n",
    "model_type = 'ResNet%dv%d' % (depth, version)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EMNIST Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['balanced', 'byclass', 'bymerge', 'digits', 'letters', 'mnist']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#listing of the available subsets:\n",
    "from emnist import list_datasets\n",
    "list_datasets()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124800, 100, 100)\n",
      "(20800, 100, 100)\n"
     ]
    }
   ],
   "source": [
    "# load the training samples for the 'letters' subset\n",
    "from emnist import extract_training_samples\n",
    "X_train_emnist, y_train_emnist = extract_training_samples('letters')\n",
    "#load the test samples for the 'letters' subset:\n",
    "from emnist import extract_test_samples\n",
    "X_test_emnist, y_test_emnist = extract_test_samples('letters')\n",
    "\n",
    "#labels must gop from 0 to 25 and not 1 to 26\n",
    "y_train_emnist=y_train_emnist-np.ones((y_train_emnist.shape[0]),dtype=int)\n",
    "y_test_emnist=y_test_emnist-np.ones((y_test_emnist.shape[0]),dtype=int)\n",
    "\n",
    "#resize images so that they correspond to the shape of the handmade dataset\n",
    "X_train_emnist_new=[]\n",
    "X_test_emnist_new=[]\n",
    "for im in X_train_emnist:\n",
    "    im=cv2.resize(im, (100,100), interpolation = cv2.INTER_AREA)\n",
    "    X_train_emnist_new.append(im)\n",
    "X_train_emnist_new=np.array(X_train_emnist_new)\n",
    "for im in X_test_emnist:\n",
    "    im=cv2.resize(im, (100,100), interpolation = cv2.INTER_AREA)\n",
    "    X_test_emnist_new.append(im)\n",
    "X_test_emnist_new=np.array(X_test_emnist_new)\n",
    "\n",
    "print(X_train_emnist_new.shape)\n",
    "print(X_test_emnist_new.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train_emnist_new shape: (124800, 100, 100, 1)\n",
      "X_test_emnist_new shape: (20800, 100, 100, 1)\n",
      "y_train_emnist shape: (124800,)\n",
      "y_test_emnist shape: (20800,)\n",
      "124800 train samples\n",
      "20800 test samples\n"
     ]
    }
   ],
   "source": [
    "# Number of classes\n",
    "num_classes_emnist = 26\n",
    "# input image dimensions\n",
    "img_rows, img_cols = 100, 100\n",
    "\n",
    "if K.image_data_format() == 'channels_first':\n",
    "    X_train_emnist_new = X_train_emnist_new.reshape(X_train_emnist_new.shape[0], 1, img_rows, img_cols)\n",
    "    X_test_emnist_new = X_test_emnist_new.reshape(X_test_emnist_new.shape[0], 1, img_rows, img_cols)\n",
    "    input_shape = (1, img_rows, img_cols)\n",
    "else:\n",
    "    X_train_emnist_new = X_train_emnist_new.reshape(X_train_emnist_new.shape[0], img_rows, img_cols, 1)\n",
    "    X_test_emnist_new = X_test_emnist_new.reshape(X_test_emnist_new.shape[0], img_rows, img_cols, 1)\n",
    "    input_shape = (img_rows, img_cols, 1)\n",
    "\n",
    "X_train_emnist_new = X_train_emnist_new.astype('float32')\n",
    "X_test_emnist_new = X_test_emnist_new.astype('float32')\n",
    "\n",
    "print('X_train_emnist_new shape:', X_train_emnist_new.shape)\n",
    "print('X_test_emnist_new shape:', X_test_emnist_new.shape)\n",
    "print('y_train_emnist shape:', y_train_emnist.shape)\n",
    "print('y_test_emnist shape:', y_test_emnist.shape)\n",
    "\n",
    "print(X_train_emnist_new.shape[0], 'train samples')\n",
    "print(X_test_emnist_new.shape[0], 'test samples')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x144 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#first look at the data\n",
    "plt.figure(figsize=(8, 2))\n",
    "for i in range(4):\n",
    "    plt.subplot(1, 4, i+1)\n",
    "    plt.imshow(X_train_emnist_new[i].reshape(100, 100), interpolation=\"none\", cmap=\"gray\")\n",
    "    plt.title('Label=%d' % y_train_emnist[i], fontsize=14)\n",
    "    plt.axis(\"off\")\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 32 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_rows = 4\n",
    "n_cols = 8\n",
    "plt.figure(figsize=(8, 4))\n",
    "for i in range(n_rows * n_cols):\n",
    "    plt.subplot(n_rows, n_cols, i+1)\n",
    "    plt.imshow(X_train_emnist_new[i].reshape(100, 100),interpolation=\"none\", cmap=\"gray\")\n",
    "    plt.axis(\"off\")\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0 1.0\n"
     ]
    }
   ],
   "source": [
    "#normalize data\n",
    "X_train_emnist_new /= 255\n",
    "X_test_emnist_new /= 255\n",
    "print(X_train_emnist_new.min(axis=None), X_train_emnist_new.max(axis=None))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124800, 100, 100, 1)\n"
     ]
    }
   ],
   "source": [
    "print(X_train_emnist_new.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Handmade Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of images :  2076\n",
      "shape of array with all the images :  (2076, 100, 100, 3)\n",
      "shape of one image :  (100, 100, 3)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#import all images from one folder into a list and fill in the list with the corresponding labels\n",
    "images=[]\n",
    "labels=[]\n",
    "for i in range(26,44):\n",
    "    for file in glob.glob('/Users/julialinhart/Documents/Ponts_2A/IMI/PDD/Composantes_ouputs/'+str(i)+'/*.jpg'):\n",
    "        im=cv2.imread(file)\n",
    "        im=cv2.resize(im, (100,100), interpolation = cv2.INTER_AREA)\n",
    "        #black and white only\n",
    "        im[im>225]=255\n",
    "        im[im<226]=0\n",
    "        images.append(im)\n",
    "        labels.append(i)\n",
    "        \n",
    "nb_images=np.shape(images)[0]\n",
    "print('number of images : ',nb_images)\n",
    "    \n",
    "#reshape \n",
    "images=np.array(images)\n",
    "labels=np.array(labels)\n",
    "\n",
    "#useful information\n",
    "print('shape of array with all the images : ',images.shape)\n",
    "print('shape of one image : ',images[221].shape)\n",
    "\n",
    "plt.imshow(images[221])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "images image data shape = (2076, 100, 100, 3)\n",
      "images_grey image data shape = (2076, 100, 100, 1)\n"
     ]
    }
   ],
   "source": [
    "#reshape 3-channel image into 1-channel image\n",
    "\n",
    "def rgb2gray(rgb):\n",
    "    gray=np.zeros((100,100,1))\n",
    "    r, g, b = rgb[:,:,0], rgb[:,:,1], rgb[:,:,2]\n",
    "    gray[:,:,0] = 0.2989 * r + 0.5870 * g + 0.1140 * b\n",
    "    return gray\n",
    "\n",
    "images_gray = np.zeros((nb_images,100,100,1))\n",
    "for i in range(nb_images):\n",
    "    rgb=images[i]\n",
    "    gray=rgb2gray(rgb)\n",
    "    images_gray[i]=gray\n",
    "\n",
    "\n",
    "print(\"images image data shape =\", images.shape)\n",
    "print(\"images_grey image data shape =\", images_gray.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#split into train and test data \n",
    "from sklearn.model_selection import train_test_split\n",
    "X, y = images_gray,labels\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0 0.9999\n"
     ]
    }
   ],
   "source": [
    "# Normalize data. \n",
    "X_train = X_train.astype('float32') / 255\n",
    "X_test = X_test.astype('float32') / 255\n",
    "print(X_train.min(axis=None), X_train.max(axis=None))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (1390, 100, 100, 1)\n",
      "X_test shape: (686, 100, 100, 1)\n",
      "Y_train shape: (1390,)\n",
      "Y_test shape: (686,)\n",
      "1390 train samples\n",
      "686 test samples\n"
     ]
    }
   ],
   "source": [
    "# If subtract pixel mean is enabled\n",
    "if subtract_pixel_mean:\n",
    "    X_train_mean = np.mean(X_train, axis=0)\n",
    "    X_train -= X_train_mean\n",
    "    X_test -= X_train_mean\n",
    "\n",
    "\n",
    "print('X_train shape:', X_train.shape)\n",
    "print('X_test shape:', X_test.shape)\n",
    "print('Y_train shape:', Y_train.shape)\n",
    "print('Y_test shape:', Y_test.shape)\n",
    "\n",
    "print(X_train.shape[0], 'train samples')\n",
    "print(X_test.shape[0], 'test samples')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the next cell we illustrate the first elements of the training data: \n",
    "pixels grayscale of the digit and their corresponding label.\n",
    "plt.figure(figsize=(8, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#first look at the data \n",
    "plt.figure(figsize=(10, 4))\n",
    "for i in range(4):\n",
    "    plt.subplot(1, 4, i+1)\n",
    "    plt.imshow(X_train[i].reshape(100, 100), cmap='gray_r')\n",
    "    plt.title('Label=%d' % Y_train[i], fontsize=14)\n",
    "    plt.axis(\"off\")\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 32 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_rows = 4\n",
    "n_cols = 8\n",
    "plt.figure(figsize=(15, 4))\n",
    "for i in range(n_rows * n_cols):\n",
    "    plt.subplot(n_rows, n_cols, i+1)\n",
    "    plt.imshow(X_train[i].reshape(100, 100),interpolation=\"none\", cmap=\"gray_r\")\n",
    "    plt.axis(\"off\")\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Concatenate both datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape: (126190, 100, 100, 1)\n",
      "x_test shape: (21486, 100, 100, 1)\n",
      "y_train shape: (126190,)\n",
      "y_test shape: (21486,)\n",
      "126190 train samples\n",
      "21486 test samples\n"
     ]
    }
   ],
   "source": [
    "#concatenate emnist dataset and handmade dataset\n",
    "x_train=np.concatenate((X_train_emnist_new,X_train),axis=0)\n",
    "x_test=np.concatenate((X_test_emnist_new,X_test),axis=0)\n",
    "y_train=np.concatenate((y_train_emnist,Y_train),axis=0)\n",
    "y_test=np.concatenate((y_test_emnist,Y_test),axis=0)\n",
    "\n",
    "print('x_train shape:', x_train.shape)\n",
    "print('x_test shape:', x_test.shape)\n",
    "print('y_train shape:', y_train.shape)\n",
    "print('y_test shape:', y_test.shape)\n",
    "\n",
    "print(y_train.shape[0], 'train samples')\n",
    "print(y_test.shape[0], 'test samples')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(126190, 44)\n"
     ]
    }
   ],
   "source": [
    "# Convert class vectors to binary class matrices.\n",
    "num_classes=44\n",
    "y_train_bin = keras.utils.to_categorical(y_train, num_classes)\n",
    "y_test_bin = keras.utils.to_categorical(y_test, num_classes)\n",
    "\n",
    "print(y_train_bin.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "input shape = (100, 100, 1)\n"
     ]
    }
   ],
   "source": [
    "# Input image dimensions.\n",
    "input_shape = x_train.shape[1:]\n",
    "print('input shape =', input_shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ResNet models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lr_schedule(epoch):\n",
    "    \"\"\"Learning Rate Schedule\n",
    "    Learning rate is scheduled to be reduced after 80, 120, 160, 180 epochs.\n",
    "    Called automatically every epoch as part of callbacks during training.\n",
    "    # Arguments\n",
    "        epoch (int): The number of epochs\n",
    "    # Returns\n",
    "        lr (float32): learning rate\n",
    "    \"\"\"\n",
    "    lr = 1e-3\n",
    "    if epoch > 180:\n",
    "        lr *= 0.5e-3\n",
    "    elif epoch > 160:\n",
    "        lr *= 1e-3\n",
    "    elif epoch > 120:\n",
    "        lr *= 1e-2\n",
    "    elif epoch > 80:\n",
    "        lr *= 1e-1\n",
    "    print('Learning rate: ', lr)\n",
    "    return lr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def resnet_layer(inputs,\n",
    "                 num_filters=16,\n",
    "                 kernel_size=3,\n",
    "                 strides=1,\n",
    "                 activation='relu',\n",
    "                 batch_normalization=True,\n",
    "                 conv_first=True):\n",
    "    \"\"\"2D Convolution-Batch Normalization-Activation stack builder\n",
    "    # Arguments\n",
    "        inputs (tensor): input tensor from input image or previous layer\n",
    "        num_filters (int): Conv2D number of filters\n",
    "        kernel_size (int): Conv2D square kernel dimensions\n",
    "        strides (int): Conv2D square stride dimensions\n",
    "        activation (string): activation name\n",
    "        batch_normalization (bool): whether to include batch normalization\n",
    "        conv_first (bool): conv-bn-activation (True) or\n",
    "            bn-activation-conv (False)\n",
    "    # Returns\n",
    "        x (tensor): tensor as input to the next layer\n",
    "    \"\"\"\n",
    "    conv = Conv2D(num_filters,\n",
    "                  kernel_size=kernel_size,\n",
    "                  strides=strides,\n",
    "                  padding='same',\n",
    "                  kernel_initializer='he_normal',\n",
    "                  kernel_regularizer=l2(1e-4))\n",
    "\n",
    "    x = inputs\n",
    "    if conv_first:\n",
    "        x = conv(x)\n",
    "        if batch_normalization:\n",
    "            x = BatchNormalization()(x)\n",
    "        if activation is not None:\n",
    "            x = Activation(activation)(x)\n",
    "    else:\n",
    "        if batch_normalization:\n",
    "            x = BatchNormalization()(x)\n",
    "        if activation is not None:\n",
    "            x = Activation(activation)(x)\n",
    "        x = conv(x)\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def resnet_v1(input_shape, depth, num_classes=44):\n",
    "    \"\"\"ResNet Version 1 Model builder [a]\n",
    "    Stacks of 2 x (3 x 3) Conv2D-BN-ReLU\n",
    "    Last ReLU is after the shortcut connection.\n",
    "    At the beginning of each stage, the feature map size is halved (downsampled)\n",
    "    by a convolutional layer with strides=2, while the number of filters is\n",
    "    doubled. Within each stage, the layers have the same number filters and the\n",
    "    same number of filters.\n",
    "    Features maps sizes:\n",
    "    stage 0: 32x32, 16\n",
    "    stage 1: 16x16, 32\n",
    "    stage 2:  8x8,  64\n",
    "    The Number of parameters is approx the same as Table 6 of [a]:\n",
    "    ResNet20 0.27M\n",
    "    ResNet32 0.46M\n",
    "    ResNet44 0.66M\n",
    "    ResNet56 0.85M\n",
    "    ResNet110 1.7M\n",
    "    # Arguments\n",
    "        input_shape (tensor): shape of input image tensor\n",
    "        depth (int): number of core convolutional layers\n",
    "        num_classes (int): number of classes (44 in our case)\n",
    "    # Returns\n",
    "        model (Model): Keras model instance\n",
    "    \"\"\"\n",
    "    if (depth - 2) % 6 != 0:\n",
    "        raise ValueError('depth should be 6n+2 (eg 20, 32, 44 in [a])')\n",
    "    # Start model definition.\n",
    "    num_filters = 16\n",
    "    num_res_blocks = int((depth - 2) / 6)\n",
    "\n",
    "    inputs = Input(shape=input_shape)\n",
    "    x = resnet_layer(inputs=inputs)\n",
    "    # Instantiate the stack of residual units\n",
    "    for stack in range(3):\n",
    "        for res_block in range(num_res_blocks):\n",
    "            strides = 1\n",
    "            if stack > 0 and res_block == 0:  # first layer but not first stack\n",
    "                strides = 2  # downsample\n",
    "            y = resnet_layer(inputs=x,\n",
    "                             num_filters=num_filters,\n",
    "                             strides=strides)\n",
    "            y = resnet_layer(inputs=y,\n",
    "                             num_filters=num_filters,\n",
    "                             activation=None)\n",
    "            if stack > 0 and res_block == 0:  # first layer but not first stack\n",
    "                # linear projection residual shortcut connection to match\n",
    "                # changed dims\n",
    "                x = resnet_layer(inputs=x,\n",
    "                                 num_filters=num_filters,\n",
    "                                 kernel_size=1,\n",
    "                                 strides=strides,\n",
    "                                 activation=None,\n",
    "                                 batch_normalization=False)\n",
    "            x = keras.layers.add([x, y])\n",
    "            x = Activation('relu')(x)\n",
    "        num_filters *= 2\n",
    "\n",
    "    # Add classifier on top.\n",
    "    # v1 does not use BN after last shortcut connection-ReLU\n",
    "    x = AveragePooling2D(pool_size=8)(x)\n",
    "    y = Flatten()(x)\n",
    "    outputs = Dense(num_classes,\n",
    "                    activation='softmax',\n",
    "                    kernel_initializer='he_normal')(y)\n",
    "\n",
    "    # Instantiate model.\n",
    "    model = Model(inputs=inputs, outputs=outputs)\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def resnet_v2(input_shape, depth, num_classes=44):\n",
    "    \"\"\"ResNet Version 2 Model builder [b]\n",
    "    Stacks of (1 x 1)-(3 x 3)-(1 x 1) BN-ReLU-Conv2D or also known as\n",
    "    bottleneck layer\n",
    "    First shortcut connection per layer is 1 x 1 Conv2D.\n",
    "    Second and onwards shortcut connection is identity.\n",
    "    At the beginning of each stage, the feature map size is halved (downsampled)\n",
    "    by a convolutional layer with strides=2, while the number of filter maps is\n",
    "    doubled. Within each stage, the layers have the same number filters and the\n",
    "    same filter map sizes.\n",
    "    Features maps sizes:\n",
    "    conv1  : 32x32,  16\n",
    "    stage 0: 32x32,  64\n",
    "    stage 1: 16x16, 128\n",
    "    stage 2:  8x8,  256\n",
    "    # Arguments\n",
    "        input_shape (tensor): shape of input image tensor\n",
    "        depth (int): number of core convolutional layers\n",
    "        num_classes (int): number of classes (44 in our case)\n",
    "    # Returns\n",
    "        model (Model): Keras model instance\n",
    "    \"\"\"\n",
    "    if (depth - 2) % 9 != 0:\n",
    "        raise ValueError('depth should be 9n+2 (eg 56 or 110 in [b])')\n",
    "    # Start model definition.\n",
    "    num_filters_in = 16\n",
    "    num_res_blocks = int((depth - 2) / 9)\n",
    "\n",
    "    inputs = Input(shape=input_shape)\n",
    "    # v2 performs Conv2D with BN-ReLU on input before splitting into 2 paths\n",
    "    x = resnet_layer(inputs=inputs,\n",
    "                     num_filters=num_filters_in,\n",
    "                     conv_first=True)\n",
    "\n",
    "    # Instantiate the stack of residual units\n",
    "    for stage in range(3):\n",
    "        for res_block in range(num_res_blocks):\n",
    "            activation = 'relu'\n",
    "            batch_normalization = True\n",
    "            strides = 1\n",
    "            if stage == 0:\n",
    "                num_filters_out = num_filters_in * 4\n",
    "                if res_block == 0:  # first layer and first stage\n",
    "                    activation = None\n",
    "                    batch_normalization = False\n",
    "            else:\n",
    "                num_filters_out = num_filters_in * 2\n",
    "                if res_block == 0:  # first layer but not first stage\n",
    "                    strides = 2    # downsample\n",
    "\n",
    "            # bottleneck residual unit\n",
    "            y = resnet_layer(inputs=x,\n",
    "                             num_filters=num_filters_in,\n",
    "                             kernel_size=1,\n",
    "                             strides=strides,\n",
    "                             activation=activation,\n",
    "                             batch_normalization=batch_normalization,\n",
    "                             conv_first=False)\n",
    "            y = resnet_layer(inputs=y,\n",
    "                             num_filters=num_filters_in,\n",
    "                             conv_first=False)\n",
    "            y = resnet_layer(inputs=y,\n",
    "                             num_filters=num_filters_out,\n",
    "                             kernel_size=1,\n",
    "                             conv_first=False)\n",
    "            if res_block == 0:\n",
    "                # linear projection residual shortcut connection to match\n",
    "                # changed dims\n",
    "                x = resnet_layer(inputs=x,\n",
    "                                 num_filters=num_filters_out,\n",
    "                                 kernel_size=1,\n",
    "                                 strides=strides,\n",
    "                                 activation=None,\n",
    "                                 batch_normalization=False)\n",
    "            x = keras.layers.add([x, y])\n",
    "\n",
    "        num_filters_in = num_filters_out\n",
    "\n",
    "    # Add classifier on top.\n",
    "    # v2 has BN-ReLU before Pooling\n",
    "    x = BatchNormalization()(x)\n",
    "    x = Activation('relu')(x)\n",
    "    x = AveragePooling2D(pool_size=8)(x)\n",
    "    y = Flatten()(x)\n",
    "    outputs = Dense(num_classes,\n",
    "                    activation='softmax',\n",
    "                    kernel_initializer='he_normal')(y)\n",
    "\n",
    "    # Instantiate model.\n",
    "    model = Model(inputs=inputs, outputs=outputs)\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "Learning rate:  0.001\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_1 (InputLayer)            (None, 100, 100, 1)  0                                            \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_1 (Conv2D)               (None, 100, 100, 16) 160         input_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_1 (BatchNor (None, 100, 100, 16) 64          conv2d_1[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "activation_1 (Activation)       (None, 100, 100, 16) 0           batch_normalization_1[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_2 (Conv2D)               (None, 100, 100, 16) 2320        activation_1[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_2 (BatchNor (None, 100, 100, 16) 64          conv2d_2[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "activation_2 (Activation)       (None, 100, 100, 16) 0           batch_normalization_2[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_3 (Conv2D)               (None, 100, 100, 16) 2320        activation_2[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_3 (BatchNor (None, 100, 100, 16) 64          conv2d_3[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "add_1 (Add)                     (None, 100, 100, 16) 0           activation_1[0][0]               \n",
      "                                                                 batch_normalization_3[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "activation_3 (Activation)       (None, 100, 100, 16) 0           add_1[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_4 (Conv2D)               (None, 100, 100, 16) 2320        activation_3[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_4 (BatchNor (None, 100, 100, 16) 64          conv2d_4[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "activation_4 (Activation)       (None, 100, 100, 16) 0           batch_normalization_4[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_5 (Conv2D)               (None, 100, 100, 16) 2320        activation_4[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_5 (BatchNor (None, 100, 100, 16) 64          conv2d_5[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "add_2 (Add)                     (None, 100, 100, 16) 0           activation_3[0][0]               \n",
      "                                                                 batch_normalization_5[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "activation_5 (Activation)       (None, 100, 100, 16) 0           add_2[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_6 (Conv2D)               (None, 100, 100, 16) 2320        activation_5[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_6 (BatchNor (None, 100, 100, 16) 64          conv2d_6[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "activation_6 (Activation)       (None, 100, 100, 16) 0           batch_normalization_6[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_7 (Conv2D)               (None, 100, 100, 16) 2320        activation_6[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_7 (BatchNor (None, 100, 100, 16) 64          conv2d_7[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "add_3 (Add)                     (None, 100, 100, 16) 0           activation_5[0][0]               \n",
      "                                                                 batch_normalization_7[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "activation_7 (Activation)       (None, 100, 100, 16) 0           add_3[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_8 (Conv2D)               (None, 50, 50, 32)   4640        activation_7[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_8 (BatchNor (None, 50, 50, 32)   128         conv2d_8[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "activation_8 (Activation)       (None, 50, 50, 32)   0           batch_normalization_8[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_9 (Conv2D)               (None, 50, 50, 32)   9248        activation_8[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_10 (Conv2D)              (None, 50, 50, 32)   544         activation_7[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_9 (BatchNor (None, 50, 50, 32)   128         conv2d_9[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "add_4 (Add)                     (None, 50, 50, 32)   0           conv2d_10[0][0]                  \n",
      "                                                                 batch_normalization_9[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "activation_9 (Activation)       (None, 50, 50, 32)   0           add_4[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_11 (Conv2D)              (None, 50, 50, 32)   9248        activation_9[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_10 (BatchNo (None, 50, 50, 32)   128         conv2d_11[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "activation_10 (Activation)      (None, 50, 50, 32)   0           batch_normalization_10[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_12 (Conv2D)              (None, 50, 50, 32)   9248        activation_10[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_11 (BatchNo (None, 50, 50, 32)   128         conv2d_12[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "add_5 (Add)                     (None, 50, 50, 32)   0           activation_9[0][0]               \n",
      "                                                                 batch_normalization_11[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "activation_11 (Activation)      (None, 50, 50, 32)   0           add_5[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_13 (Conv2D)              (None, 50, 50, 32)   9248        activation_11[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_12 (BatchNo (None, 50, 50, 32)   128         conv2d_13[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "activation_12 (Activation)      (None, 50, 50, 32)   0           batch_normalization_12[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_14 (Conv2D)              (None, 50, 50, 32)   9248        activation_12[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_13 (BatchNo (None, 50, 50, 32)   128         conv2d_14[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "add_6 (Add)                     (None, 50, 50, 32)   0           activation_11[0][0]              \n",
      "                                                                 batch_normalization_13[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "activation_13 (Activation)      (None, 50, 50, 32)   0           add_6[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_15 (Conv2D)              (None, 25, 25, 64)   18496       activation_13[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_14 (BatchNo (None, 25, 25, 64)   256         conv2d_15[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "activation_14 (Activation)      (None, 25, 25, 64)   0           batch_normalization_14[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_16 (Conv2D)              (None, 25, 25, 64)   36928       activation_14[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_17 (Conv2D)              (None, 25, 25, 64)   2112        activation_13[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_15 (BatchNo (None, 25, 25, 64)   256         conv2d_16[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "add_7 (Add)                     (None, 25, 25, 64)   0           conv2d_17[0][0]                  \n",
      "                                                                 batch_normalization_15[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "activation_15 (Activation)      (None, 25, 25, 64)   0           add_7[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_18 (Conv2D)              (None, 25, 25, 64)   36928       activation_15[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_16 (BatchNo (None, 25, 25, 64)   256         conv2d_18[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "activation_16 (Activation)      (None, 25, 25, 64)   0           batch_normalization_16[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_19 (Conv2D)              (None, 25, 25, 64)   36928       activation_16[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_17 (BatchNo (None, 25, 25, 64)   256         conv2d_19[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "add_8 (Add)                     (None, 25, 25, 64)   0           activation_15[0][0]              \n",
      "                                                                 batch_normalization_17[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "activation_17 (Activation)      (None, 25, 25, 64)   0           add_8[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_20 (Conv2D)              (None, 25, 25, 64)   36928       activation_17[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_18 (BatchNo (None, 25, 25, 64)   256         conv2d_20[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "activation_18 (Activation)      (None, 25, 25, 64)   0           batch_normalization_18[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_21 (Conv2D)              (None, 25, 25, 64)   36928       activation_18[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_19 (BatchNo (None, 25, 25, 64)   256         conv2d_21[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "add_9 (Add)                     (None, 25, 25, 64)   0           activation_17[0][0]              \n",
      "                                                                 batch_normalization_19[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "activation_19 (Activation)      (None, 25, 25, 64)   0           add_9[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "average_pooling2d_1 (AveragePoo (None, 3, 3, 64)     0           activation_19[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "flatten_1 (Flatten)             (None, 576)          0           average_pooling2d_1[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "dense_1 (Dense)                 (None, 44)           25388       flatten_1[0][0]                  \n",
      "==================================================================================================\n",
      "Total params: 298,892\n",
      "Trainable params: 297,516\n",
      "Non-trainable params: 1,376\n",
      "__________________________________________________________________________________________________\n",
      "ResNet20v1\n"
     ]
    }
   ],
   "source": [
    "if version == 2:\n",
    "    model = resnet_v2(input_shape=input_shape, depth=depth)\n",
    "else:\n",
    "    model = resnet_v1(input_shape=input_shape, depth=depth)\n",
    "\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "              optimizer=Adam(lr=lr_schedule(0)),\n",
    "              metrics=['accuracy'])\n",
    "model.summary()\n",
    "print(model_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare model model saving directory.\n",
    "save_dir = os.path.join(os.getcwd(), 'saved_models_2')\n",
    "model_name = 'meca_intelligente_%s_model.{epoch:03d}.h5' % model_type\n",
    "if not os.path.isdir(save_dir):\n",
    "    os.makedirs(save_dir)\n",
    "filepath = os.path.join(save_dir, model_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare callbacks for model saving and for learning rate adjustment.\n",
    "checkpoint = ModelCheckpoint(filepath=filepath,\n",
    "                             monitor='val_acc',\n",
    "                             verbose=1,\n",
    "                             save_best_only=True)\n",
    "\n",
    "lr_scheduler = LearningRateScheduler(lr_schedule)\n",
    "\n",
    "lr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1),\n",
    "                               cooldown=0,\n",
    "                               patience=5,\n",
    "                               min_lr=0.5e-6)\n",
    "\n",
    "callbacks = [checkpoint, lr_reducer, lr_scheduler]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using real-time data augmentation.\n"
     ]
    }
   ],
   "source": [
    "# Run training, with or without data augmentation.\n",
    "if not data_augmentation:\n",
    "    print('Not using data augmentation.')\n",
    "    model.fit(x_train, y_train_bin,\n",
    "              batch_size=batch_size,\n",
    "              epochs=epochs,\n",
    "              validation_data=(x_test, y_test_bin),\n",
    "              shuffle=True,\n",
    "              callbacks=callbacks)\n",
    "else:\n",
    "    print('Using real-time data augmentation.')\n",
    "    # This will do preprocessing and realtime data augmentation:\n",
    "    datagen = ImageDataGenerator(\n",
    "        # set input mean to 0 over the dataset\n",
    "        featurewise_center=False,\n",
    "        # set each sample mean to 0\n",
    "        samplewise_center=False,\n",
    "        # divide inputs by std of dataset\n",
    "        featurewise_std_normalization=False,\n",
    "        # divide each input by its std\n",
    "        samplewise_std_normalization=False,\n",
    "        # apply ZCA whitening\n",
    "        zca_whitening=False,\n",
    "        # epsilon for ZCA whitening\n",
    "        zca_epsilon=1e-06,\n",
    "        # randomly rotate images in the range (deg 0 to 180)\n",
    "        rotation_range=0,\n",
    "        # randomly shift images horizontally\n",
    "        width_shift_range=0.1,\n",
    "        # randomly shift images vertically\n",
    "        height_shift_range=0.1,\n",
    "        # set range for random shear\n",
    "        shear_range=0.,\n",
    "        # set range for random zoom\n",
    "        zoom_range=0.,\n",
    "        # set range for random channel shifts\n",
    "        channel_shift_range=0.,\n",
    "        # set mode for filling points outside the input boundaries\n",
    "        fill_mode='nearest',\n",
    "        # value used for fill_mode = \"constant\"\n",
    "        cval=0.,\n",
    "        # randomly flip images\n",
    "        horizontal_flip=True,\n",
    "        # randomly flip images\n",
    "        vertical_flip=False,\n",
    "        # set rescaling factor (applied before any other transformation)\n",
    "        rescale=None,\n",
    "        # set function that will be applied on each input\n",
    "        preprocessing_function=None,\n",
    "        # image data format, either \"channels_first\" or \"channels_last\"\n",
    "        data_format=None,\n",
    "        # fraction of images reserved for validation (strictly between 0 and 1)\n",
    "        validation_split=0.0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute quantities required for featurewise normalization\n",
    "# (std, mean, and principal components if ZCA whitening is applied).\n",
    "datagen.fit(x_train)\n",
    "\n",
    "# Fit the model on the batches generated by datagen.flow().\n",
    "history=model.fit_generator(datagen.flow(x_train, y_train_bin, batch_size=batch_size),\n",
    "                    validation_data=(x_test, y_test_bin),\n",
    "                    epochs=epochs, verbose=1, workers=4,\n",
    "                    callbacks=callbacks, steps_per_epoch = 1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /anaconda3/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "21486/21486 [==============================] - 997s 46ms/step\n",
      "Test loss: 2.569626907812731\n",
      "Test accuracy: 0.3659126873312855\n"
     ]
    }
   ],
   "source": [
    "model_1=keras.models.load_model('/Users/julialinhart/Documents/Ponts_2A/IMI/PDD/saved_models/meca_intelligente_ResNet20v1_model.062.h5')\n",
    "# Score trained model.\n",
    "scores = model_1.evaluate(x_test, y_test_bin, verbose=1)\n",
    "print('Test loss:', scores[0])\n",
    "print('Test accuracy:', scores[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot model accuracy for training and validation data\n",
    "plt.figure(figsize=(7, 5))\n",
    "plt.plot(model.epoch, model.history['acc'], lw=3, label='Training')\n",
    "plt.plot(model.epoch, model.history['val_acc'], lw=3, label='Testing')\n",
    "plt.legend(fontsize=14)\n",
    "plt.title('Accuracy of ResNet model', fontsize=16)\n",
    "plt.xlabel('Epoch', fontsize=14)\n",
    "plt.ylabel('Accuracy', fontsize=14)\n",
    "plt.tight_layout()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Apply finalized model to recognize the different elements of a mechanical schema "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We apply our code on images obtained from the schema \"image_test.jepg\". It is displayed below :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0xb2bad22e8>"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "im=cv2.imread('/Users/julialinhart/Documents/Ponts_2A/IMI/PDD/image_test/raw_input/image_test.jpeg')\n",
    "plt.imshow(im)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This image had been preprocessed (edge detection - seuillage par hysteresis - connexite) to obtain our input images : one image per element of the schema represented by black figures on a white background only."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape of array with all the images :  (16, 100, 100, 3)\n",
      "shape of one image :  (100, 100, 3)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#import output of image preprocessing \n",
    "examples=[]\n",
    "\n",
    "for file in glob.glob('/Users/julialinhart/Documents/Ponts_2A/IMI/PDD/image_test/output/*.jpg'):\n",
    "    im=cv2.imread(file)\n",
    "    im=cv2.resize(im, (100,100), interpolation = cv2.INTER_AREA)\n",
    "    #black and white only\n",
    "    im[im>225]=255\n",
    "    im[im<226]=0\n",
    "    examples.append(im)\n",
    "        \n",
    "#reshape \n",
    "examples=np.array(examples)\n",
    "\n",
    "#useful information\n",
    "print('shape of array with all the images : ',examples.shape)\n",
    "print('shape of one image : ',examples[0].shape)\n",
    "\n",
    "plt.imshow(examples[0])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "images image data shape = (16, 100, 100, 3)\n",
      "images_grey image data shape = (16, 100, 100, 1)\n"
     ]
    }
   ],
   "source": [
    "nb_examples=examples.shape[0]\n",
    "X_new = np.zeros((nb_examples,100,100,1))\n",
    "for i in range(nb_examples):\n",
    "    rgb=examples[i]\n",
    "    gray=rgb2gray(rgb)\n",
    "    X_new[i]=gray\n",
    "\n",
    "\n",
    "print(\"images image data shape =\", examples.shape)\n",
    "print(\"images_grey image data shape =\", X_new.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n",
      "Predicted label : 16\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAD0AAAD8CAYAAADE1qz4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAABKFJREFUeJztncty5DAIRdHU/P8vexZpVRRFL08Dfc3lbFKp9KJPwDJIslyu6xI2/nz6C3yClGYhpVlIaRZSmoW/n/4CL65Sisyqw1LK9we/PlOGHzwERVpEvuSq+EBUDShpkW9xy54A5pqukiPZUsqPyL8LXKQrFOldJetPivSurK5nrRSHibTI7+j2klrRh5DuU7tileIQ0pWd5KqAuQOUdGUW8VDp3WM9WVlyNpQEiPQupVw3M+6tGzZMpDVr6x0Q0rUK8xKHkPYGStor2lDSXqQ0C3DSHhUinDTlQLabSNAAogwd0cpqTy5kl8UCSnr/SrfN1FCMLsuTlGYhpVlIaRYgpO/U1xq1OIT0aJ9Ji/YCPUrt/eNLHEi+FW4UaVcg0tsbSunsslDohbWnjFAGsrtfIlakT+7V7wIlvbqONde5Mr2fQJjae4d27Q0lPYpi2BWO1WpG/7kwOwb7QmT0u5awCM7o7QrUNe0FRHrLQcPR7fiPe5+e7QN/Fxjp9okczUFrBIz0DIsHWeCkR6msHXUIac/NsCIg0j2ryIZqODyLJBjpE7T+MfDSFhkALR36YTTt5652ZJfFAkR6y+sgCJHjFI9zEETLrAgJNzEosj//IFRF5glcelM+zuBBSrMAIZ2TCA5ASHvX/9lwsEApjVKRHV9jr9WP569l5S3LAXjpdlEv1Hlku8eHtdMfQtpj0a4FQlrkXFJj7RrimvauCiGk71yzIScGPYCQ9k5vlIHMtSSDiLQ3KJHOTe4rKFc46G5ZWjX4o6RpNtpUwj6XtSL03lAPHiEddr/3ipC7gL2BKENX6WvRgeVaFgsQ6S2Tc06szkRAkRaR+Xx3jt4KwEhbvkCoB0a6Mnt1lCYQ0qNrt3+xEGWXpQm0tNXqJYT06BA2ijejVSjP956xO5LvDjDSfQrX0bsf0TXILosFlIFsehDEZLtFvLWsVpTiAdNRZEPW3jtC99On76B+FyjpFSGXdU42xYVqOETOIql1uCLEfXrUUbUTCyE3xPZFSFuY1L9rApHeI2ERuwnCbDhYoJSGGMhKKctrTLvLgpCueI0vlOmd0ixAXdO7clPrmoeSbqF4LkskR29TUvrTeD1HnV0WCyij93yX3HhxPt6yTiX09osR7fxYyDkybx4lTfWIEt2qJcXx9SNyIFMApTgRkfWr4MKl9+iIHstdwFCRHkWzXePSGtSyy2IBJb2nr2L+8aGoXZb1MdciOJE+2tQetrVcDayhGg6rvSUzIKS9gbimKQ9hO0XrRMlHSYsEOsbnJIKaDQdK7X2dSIWryHb/fM3goETaFZhIewJxnxbG873vEOqW5QmEtDePkw7zDIeIb4pDRJr1LODlxH7IMxH6ZZvdW4lDnOTuDaV0NhwsUEpDjN5y2GU1IzdPlxVqhWOFRXkKLa2916QCK20lLAIqbSksAihtLSwCKJ2vYjYipT+F92xodlksPKrhaIhzJsLJhGDOkf0nUJHusRrVIaRzAc+BlGYB4pqurG5Rmi0nfKQtDmSDl7YAIr1Z16fzXbXWpDQLKc1CSrOQ0iykNAspzUJKs5DSLKQ0CynNQkqz8A9SQiBIoPVysQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 576x288 with 16 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#prediction\n",
    "y_new = model_1.predict(X_new)\n",
    "y_classes = y_new.argmax(axis=-1)\n",
    "    \n",
    "n_rows = len(X_new)\n",
    "n_cols = 1\n",
    "plt.figure(figsize=(8, 4))\n",
    "for i in range(n_rows * n_cols):\n",
    "    plt.subplot(n_rows, n_cols, i+1)\n",
    "    plt.imshow(X_new[i].reshape(100, 100), cmap='gray')\n",
    "    print('Predicted label : '+str(y_classes[i]))\n",
    "    plt.axis(\"off\")\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
